/**
 * This class is generated by jOOQ
 */
package generated.tables.records


import generated.tables.PlayEvolutions

import java.lang.Integer
import java.lang.String
import java.sql.Timestamp

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	),
	comments = "This class is generated by jOOQ"
)
class PlayEvolutionsRecord extends UpdatableRecordImpl[PlayEvolutionsRecord](PlayEvolutions.PLAY_EVOLUTIONS) with Record7[Integer, String, Timestamp, String, String, String, String] {

	/**
	 * Setter for <code>public.play_evolutions.id</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>public.play_evolutions.id</code>.
	 */
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>public.play_evolutions.hash</code>.
	 */
	def setHash(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>public.play_evolutions.hash</code>.
	 */
	def getHash : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.play_evolutions.applied_at</code>.
	 */
	def setAppliedAt(value : Timestamp) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>public.play_evolutions.applied_at</code>.
	 */
	def getAppliedAt : Timestamp = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[Timestamp]
	}

	/**
	 * Setter for <code>public.play_evolutions.apply_script</code>.
	 */
	def setApplyScript(value : String) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>public.play_evolutions.apply_script</code>.
	 */
	def getApplyScript : String = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.play_evolutions.revert_script</code>.
	 */
	def setRevertScript(value : String) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>public.play_evolutions.revert_script</code>.
	 */
	def getRevertScript : String = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.play_evolutions.state</code>.
	 */
	def setState(value : String) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>public.play_evolutions.state</code>.
	 */
	def getState : String = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.play_evolutions.last_problem</code>.
	 */
	def setLastProblem(value : String) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>public.play_evolutions.last_problem</code>.
	 */
	def getLastProblem : String = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row7[Integer, String, Timestamp, String, String, String, String] = {
		super.fieldsRow.asInstanceOf[ Row7[Integer, String, Timestamp, String, String, String, String] ]
	}

	override def valuesRow : Row7[Integer, String, Timestamp, String, String, String, String] = {
		super.valuesRow.asInstanceOf[ Row7[Integer, String, Timestamp, String, String, String, String] ]
	}
	override def field1 : Field[Integer] = PlayEvolutions.PLAY_EVOLUTIONS.ID
	override def field2 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.HASH
	override def field3 : Field[Timestamp] = PlayEvolutions.PLAY_EVOLUTIONS.APPLIED_AT
	override def field4 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.APPLY_SCRIPT
	override def field5 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.REVERT_SCRIPT
	override def field6 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.STATE
	override def field7 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.LAST_PROBLEM
	override def value1 : Integer = getId
	override def value2 : String = getHash
	override def value3 : Timestamp = getAppliedAt
	override def value4 : String = getApplyScript
	override def value5 : String = getRevertScript
	override def value6 : String = getState
	override def value7 : String = getLastProblem

	override def value1(value : Integer) : PlayEvolutionsRecord = {
		setId(value)
		this
	}

	override def value2(value : String) : PlayEvolutionsRecord = {
		setHash(value)
		this
	}

	override def value3(value : Timestamp) : PlayEvolutionsRecord = {
		setAppliedAt(value)
		this
	}

	override def value4(value : String) : PlayEvolutionsRecord = {
		setApplyScript(value)
		this
	}

	override def value5(value : String) : PlayEvolutionsRecord = {
		setRevertScript(value)
		this
	}

	override def value6(value : String) : PlayEvolutionsRecord = {
		setState(value)
		this
	}

	override def value7(value : String) : PlayEvolutionsRecord = {
		setLastProblem(value)
		this
	}

	override def values(value1 : Integer, value2 : String, value3 : Timestamp, value4 : String, value5 : String, value6 : String, value7 : String) : PlayEvolutionsRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this.value6(value6)
		this.value7(value7)
		this
	}

	/**
	 * Create a detached, initialised PlayEvolutionsRecord
	 */
	def this(id : Integer, hash : String, appliedAt : Timestamp, applyScript : String, revertScript : String, state : String, lastProblem : String) = {
		this()

		setValue(0, id)
		setValue(1, hash)
		setValue(2, appliedAt)
		setValue(3, applyScript)
		setValue(4, revertScript)
		setValue(5, state)
		setValue(6, lastProblem)
	}
}
