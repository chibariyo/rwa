/**
 * This class is generated by jOOQ
 */
package generated


import generated.tables.MentionSubscriptions
import generated.tables.Mentions
import generated.tables.PlayEvolutions
import generated.tables.TwitterUser
import generated.tables.User
import generated.tables.records.MentionSubscriptionsRecord
import generated.tables.records.MentionsRecord
import generated.tables.records.PlayEvolutionsRecord
import generated.tables.records.TwitterUserRecord
import generated.tables.records.UserRecord

import java.lang.Long

import javax.annotation.Generated

import org.jooq.Identity
import org.jooq.UniqueKey
import org.jooq.impl.AbstractKeys


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	),
	comments = "This class is generated by jOOQ"
)
object Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	val IDENTITY_MENTION_SUBSCRIPTIONS = Identities0.IDENTITY_MENTION_SUBSCRIPTIONS
	val IDENTITY_MENTIONS = Identities0.IDENTITY_MENTIONS
	val IDENTITY_TWITTER_USER = Identities0.IDENTITY_TWITTER_USER
	val IDENTITY_USER = Identities0.IDENTITY_USER

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	val MENTION_SUBSCRIPTIONS_PKEY = UniqueKeys0.MENTION_SUBSCRIPTIONS_PKEY
	val MENTIONS_PKEY = UniqueKeys0.MENTIONS_PKEY
	val PLAY_EVOLUTIONS_PKEY = UniqueKeys0.PLAY_EVOLUTIONS_PKEY
	val TWITTER_USER_PKEY = UniqueKeys0.TWITTER_USER_PKEY
	val USER_PKEY = UniqueKeys0.USER_PKEY

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private object Identities0 extends AbstractKeys {
		val IDENTITY_MENTION_SUBSCRIPTIONS : Identity[MentionSubscriptionsRecord, Long] = AbstractKeys.createIdentity(MentionSubscriptions.MENTION_SUBSCRIPTIONS, MentionSubscriptions.MENTION_SUBSCRIPTIONS.ID)
		val IDENTITY_MENTIONS : Identity[MentionsRecord, Long] = AbstractKeys.createIdentity(Mentions.MENTIONS, Mentions.MENTIONS.ID)
		val IDENTITY_TWITTER_USER : Identity[TwitterUserRecord, Long] = AbstractKeys.createIdentity(TwitterUser.TWITTER_USER, TwitterUser.TWITTER_USER.ID)
		val IDENTITY_USER : Identity[UserRecord, Long] = AbstractKeys.createIdentity(User.USER, User.USER.ID)
	}

	private object UniqueKeys0 extends AbstractKeys {
		val MENTION_SUBSCRIPTIONS_PKEY : UniqueKey[MentionSubscriptionsRecord] = AbstractKeys.createUniqueKey(MentionSubscriptions.MENTION_SUBSCRIPTIONS, MentionSubscriptions.MENTION_SUBSCRIPTIONS.ID)
		val MENTIONS_PKEY : UniqueKey[MentionsRecord] = AbstractKeys.createUniqueKey(Mentions.MENTIONS, Mentions.MENTIONS.ID)
		val PLAY_EVOLUTIONS_PKEY : UniqueKey[PlayEvolutionsRecord] = AbstractKeys.createUniqueKey(PlayEvolutions.PLAY_EVOLUTIONS, PlayEvolutions.PLAY_EVOLUTIONS.ID)
		val TWITTER_USER_PKEY : UniqueKey[TwitterUserRecord] = AbstractKeys.createUniqueKey(TwitterUser.TWITTER_USER, TwitterUser.TWITTER_USER.ID)
		val USER_PKEY : UniqueKey[UserRecord] = AbstractKeys.createUniqueKey(User.USER, User.USER.ID)
	}
}
